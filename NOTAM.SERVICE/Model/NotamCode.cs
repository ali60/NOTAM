using System;using System.Collections.Generic;using System.ComponentModel;using System.Data.Linq;using System.Data.Linq.Mapping;using System.Linq;using System.Text;namespace NOTAM.Service{    [Table(Name = "dbo.NTM_CODES")]    public class NotamCode : NotamBase, IDataErrorInfo    {        #region Fields        #endregion        #region Creation        public static NotamCode CreateNewNotamCodes()        {            return new NotamCode();        }        public NotamCode()        {        }        #endregion // Creation        [Column(Name = "Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]        public  int Id        {            get;            set;        }        private string _subject;        [Column(Name = "Subject", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]        public string Subject        {            get { return _subject; }            set            {                if (_subject != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Subject");                    _subject = value;                }                _subject = value;            }        }        private string _subjectDesc;        [Column(Name = "Subject_Desc", DbType = "NVarChar(100) NOT NULL", CanBeNull = true)]        public string Subject_Desc        {            get { return _subjectDesc; }            set            {                if (_subjectDesc != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Subject_Desc");                    _subjectDesc = value;                }            }        }        private string _condition;        [Column(Name = "Condition", DbType = "nVarChar(20)")]        public string Condition        {            get { return _condition; }            set            {                if (_condition != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Condition");                    _condition = value;                }            }        }        private string _conditionDesc;        [Column(Name = "Condition_Desc", DbType = "nVarChar(20)")]        public string Condition_Desc        {            get { return _conditionDesc; }            set            {                if (_conditionDesc != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Condition_Desc");                    _conditionDesc = value;                }            }        }        private string _scope;        [Column(Name = "Scope", DbType = "nVarChar(20)")]        public string Scope        {            get { return _scope; }            set            {                if (_scope != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Scope");                    _scope = value;                }            }        }        private string _category;        [Column(Name = "Category", DbType = "nVarChar(20)")]        public string Category        {            get { return _category; }            set            {                if (_category  != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Category");                    _category = value;                }            }        }        private string _traffic;        [Column(Name = "Traffic", DbType = "nVarChar(20)")]        public string Traffic        {            get { return _traffic; }            set            {                if (_traffic != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Traffic");                    _traffic = value;                }            }        }        private string _purpose;        [Column(Name = "Purpose", DbType = "nVarChar(20)")]        public string Purpose        {            get { return _purpose; }            set            {                if (_purpose  != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Purpose");                    _purpose = value;                }            }        }        #region IDataErrorInfo Members        string IDataErrorInfo.Error { get { return null; } }        string IDataErrorInfo.this[string propertyName]        {            get { return this.GetValidationError(propertyName); }        }        #endregion // IDataErrorInfo Members        #region Validation        /// <summary>        /// Returns true if this object has no validation errors.        /// </summary>        public bool IsValid        {            get            {                foreach (string property in ValidatedProperties)                    if (GetValidationError(property) != null)                        return false;                return true;            }        }        static readonly string[] ValidatedProperties =         {             //todo: add properties name        };        string GetValidationError(string propertyName)        {            if (Array.IndexOf(ValidatedProperties, propertyName) < 0)                return null;            string error = null;            switch (propertyName)            {                //case SerialPro:                //    error = this.ValidateProperty();                //    break;                //case DeskTypePro:                //    error = this.ValidateProperty();                //    break;                //case CenterTypePro:                //    error = this.ValidateProperty();                //    break;                //default:                //    Debug.Fail("Unexpected property being validated on Customer: " + propertyName);                //    break;            }            return error;        }        string ValidateProperty()        {            return null;        }        #endregion // Validation        public string DisplayCaption        {            get { return ToString(); }        }        #region Object Members        public override string ToString()        {            if (!string.IsNullOrEmpty(Subject) && !string.IsNullOrEmpty(Condition))                return Subject +Condition;            return "Subject +Condition";        }        public override bool Equals(object obj)        {            return base.Equals(obj);        }        #endregion    }}