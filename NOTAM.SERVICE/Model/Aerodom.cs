using System;using System.Collections.Generic;using System.ComponentModel;using System.Data.Linq;using System.Data.Linq.Mapping;using System.Diagnostics;using System.Linq;using System.Text;namespace NOTAM.Service{    [Table(Name = "dbo.NTM_AERODOMS")]    public class Aerodom : CodeBase, IDataErrorInfo    {        #region Private Fields        private const string SerialPro = "Serial";        private const string CenterTypePro = "CenterType";        private const string DeskTypePro = "DeskType";        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);        private EntitySet<FIR> _FIRs;        #endregion        #region Creation        public static Aerodom CreateNewAerodom()        {            return new Aerodom();        }        public Aerodom()        {        }        #endregion // Creation        #region State Properties        [Column(Name = "Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]        public int Id { get; set; }        private string _code;        [Column(Name = "Code", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]        public override string Code        {            get { return _code; }            set            {                if (_code != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Code");                    _code = value;                }            }        }        private string _name;        [Column(Name = "Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = true)]        public override string Name        {            get { return _name; }            set            {                if (_name != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Name");                    _name = value;                }            }        }        private string _latitude;        [Column(Name = "Latitude", DbType = "NVarChar(50)")]        public string Latitude        {            get { return _latitude; }            set            {                if (_latitude != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Latitude");                    _latitude = value;                }            }        }        private string _longtitude;        [Column(Name = "LongTitude", DbType = "NVarChar(50)")]        public string Longtitude        {            get { return _longtitude; }            set            {                if (_longtitude != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Longtitude");                    _longtitude = value;                }            }        }        private string _direction;        [Column(Name = "Direction", DbType = "NVarChar(50)")]        public string Direction        {            get { return _direction; }            set            {                if (_direction != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Direction");                    _direction = value;                }            }        }        private string _vor;        [Column(Name = "VOR", DbType = "NVarChar(50)")]        public string VOR        {            get { return _vor; }            set            {                if (_vor != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("VOR");                    _vor = value;                }            }        }        private string _l;        [Column(Name = "I_L", DbType = "NVarChar(50)")]        public string I_L        {            get { return _l; }            set            {                if (_l != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("I_L");                    _l = value;                }            }        }        private string _address;        [Column(Name = "address", DbType = "NVarChar(50)")]        public string Address        {            get { return _address; }            set            {                if (_address != value)                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("ADDRESS");                    _address = value;                }            }        }        [Column(Name = "Fir_Id", DbType = "Int")]        public System.Nullable<int> Fir_Id;        private EntityRef<FIR> _FIR;        [System.Data.Linq.Mapping.Association(Name = "NTM_FIR_NTM_AERODOM", Storage = "_FIR", ThisKey = "Fir_Id", OtherKey = "Id", IsForeignKey = true)]        public FIR FIR        {            get            {                return this._FIR.Entity;            }            set            {                FIR previousValue = this._FIR.Entity;                if (((previousValue != value)                            || (this._FIR.HasLoadedOrAssignedValue == false)))                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("FIR");                    if ((previousValue != null))                    {                        this._FIR.Entity = null;                        //previousValue.NOTAMs.Remove(this);                    }                    this._FIR.Entity = value;                    if ((value != null))                    {                        //value.NOTAMs.Add(this);                        this.Fir_Id = value.Id;                    }                    else                    {                        this.Fir_Id = default(Nullable<int>);                    }                }            }        }        [Column(Name = "Country_Id", DbType = "Int")]        public System.Nullable<int> Country_Id;        private EntityRef<Country> _Country;        [System.Data.Linq.Mapping.Association(Name = "NTM_COUNTRY_NTM_AERODOM", Storage = "_Country", ThisKey = "Country_Id", OtherKey = "Id", IsForeignKey = true)]        public Country Country        {            get            {                return this._Country.Entity;            }            set            {                Country previousValue = this._Country.Entity;                if (((previousValue != value)                            || (this._Country.HasLoadedOrAssignedValue == false)))                {                    this.SendPropertyChanging();                    this.SendPropertyChanged("Country");                    if ((previousValue != null))                    {                        this._Country.Entity = null;                        //previousValue.NOTAMs.Remove(this);                    }                    this._Country.Entity = value;                    if ((value != null))                    {                        //value.NOTAMs.Add(this);                        this.Country_Id = value.Id;                    }                    else                    {                        this.Country_Id = default(Nullable<int>);                    }                }            }        }        #endregion        #region IDataErrorInfo Members        string IDataErrorInfo.Error { get { return null; } }        string IDataErrorInfo.this[string propertyName]        {            get { return this.GetValidationError(propertyName); }        }        #endregion // IDataErrorInfo Members        #region Validation        /// <summary>        /// Returns true if this object has no validation errors.        /// </summary>        public bool IsValid        {            get            {                foreach (string property in ValidatedProperties)                    if (GetValidationError(property) != null)                        return false;                return true;            }        }        static readonly string[] ValidatedProperties =         {             SerialPro ,             CenterTypePro ,             DeskTypePro ,        };        string GetValidationError(string propertyName)        {            if (Array.IndexOf(ValidatedProperties, propertyName) < 0)                return null;            string error = null;            switch (propertyName)            {                case SerialPro:                    error = this.ValidateProperty();                    break;                case DeskTypePro:                    error = this.ValidateProperty();                    break;                case CenterTypePro:                    error = this.ValidateProperty();                    break;                default:                    Debug.Fail("Unexpected property being validated on Customer: " + propertyName);                    break;            }            return error;        }        string ValidateProperty()        {            return null;        }        #endregion // Validation        #region Object Members        public override string ToString()        {            if (!string.IsNullOrEmpty(Code))                return Code;            return "Code";        }        public override bool Equals(object obj)        {            return base.Equals(obj);        }        #endregion    }}